// src/app/admin/policies/page.tsx
'use client' // üëà 1. ‡∏õ‡∏£‡∏∞‡∏Å‡∏≤‡∏®‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô Client Component

import { useEffect, useState } from 'react'
import Link from 'next/link'
import { createClient } from '../../../../utils/supabase/client' // üëà 2. Import ‡∏à‡∏≤‡∏Å client.ts ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô
import AdminNavbar from '@/components/admin/AdminNavbar'
import DeletePolicyButton from '@/components/admin/DeletePolicyButton'

// ‡∏Å‡∏≥‡∏´‡∏ô‡∏î Type ‡∏Ç‡∏≠‡∏á Policy
interface Policy {
  id: string;
  title: string;
  status: string;
  publishDate: string;
  imageUrl: string | null;
  created_at: string;
}

export default function AdminPoliciesPage() {
  const [policies, setPolicies] = useState<Policy[]>([])
  const [loading, setLoading] = useState(true)
  const [error, setError] = useState<string | null>(null)

  // 3. ‡πÉ‡∏ä‡πâ useEffect ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏ß‡πá‡∏ö‡πÇ‡∏´‡∏•‡∏î‡πÄ‡∏™‡∏£‡πá‡∏à
  useEffect(() => {
    const fetchPolicies = async () => {
      const supabase = createClient()
      const { data, error } = await supabase
        .from('policies')
        .select('*')
        .order('created_at', { ascending: false })

      if (error) {
        setError(error.message)
      } else {
        setPolicies(data)
      }
      setLoading(false)
    }

    fetchPolicies()
  }, [])

  return (
    <div className="d-flex flex-column min-vh-100 bg-light">
      <AdminNavbar />
      <main className="container flex-grow-1 py-4">
        <div className="d-flex justify-content-between align-items-center mb-4">
          <h1 className="text-dark-blue">‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏ô‡πÇ‡∏¢‡∏ö‡∏≤‡∏¢</h1>
          <Link href="/admin/policies/create" className="btn btn-primary">
            + ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ô‡πÇ‡∏¢‡∏ö‡∏≤‡∏¢‡πÉ‡∏´‡∏°‡πà
          </Link>
        </div>

        {/* 4. ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏ï‡∏≤‡∏° State ‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏à‡∏≤‡∏Å‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• */}
        {loading ? (
          <p>‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ô‡πÇ‡∏¢‡∏ö‡∏≤‡∏¢...</p>
        ) : error ? (
          <div className="alert alert-danger">‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {error}</div>
        ) : policies.length === 0 ? (
          <div className="alert alert-info">‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ô‡πÇ‡∏¢‡∏ö‡∏≤‡∏¢‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö</div>
        ) : (
          <div className="table-responsive">
            <table className="table table-striped table-hover shadow-sm rounded overflow-hidden">
              <thead className="bg-primary text-white">
                <tr>
                  <th scope="col">‡∏ä‡∏∑‡πà‡∏≠‡∏ô‡πÇ‡∏¢‡∏ö‡∏≤‡∏¢</th>
                  <th scope="col">‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞</th>
                  <th scope="col">‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏ú‡∏¢‡πÅ‡∏û‡∏£‡πà</th>
                  <th scope="col">‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏°‡∏∑‡πà‡∏≠</th>
                  <th scope="col">‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£</th>
                </tr>
              </thead>
              <tbody>
                {policies.map((policy) => (
                  <tr key={policy.id}>
                    <td>{policy.title}</td>
                    <td>
                      <span className={`badge ${policy.status === '‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à' ? 'bg-success' : 'bg-secondary'}`}>
                        {policy.status}
                      </span>
                    </td>
                    <td>{new Date(policy.publishDate).toLocaleDateString('th-TH')}</td>
                    <td>{new Date(policy.created_at).toLocaleDateString('th-TH')}</td>
                    <td>
                      <Link href={`/admin/policies/${policy.id}/edit`} className="btn btn-info btn-sm me-2">
                        ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç
                      </Link>
                      <DeletePolicyButton policyId={policy.id} />
                    </td>
                  </tr>
                ))}
              </tbody>
            </table>
          </div>
        )}
      </main>
    </div>
  )
}
